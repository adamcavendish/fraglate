"use strict";var FraglateEval=function(){var fraglate=require("./index"),_=require("./util"),FraglateEval=function(t){this.fraglate=t};return FraglateEval.eval_with_context=function(code,context){return function(){return eval(code)}.call(context)},FraglateEval.eval_with_context_as_function=function(code,context){return function(){return eval("(function () { "+code+" }).bind(this)()")}.call(context)},FraglateEval.prototype.evalTranslate=function(t,e,r){if(_.isNil(t))return"";for(var a=/<([\s\S]+?)>|\\(?:<[\s\S]+?>)/g,n=0,l="";;){var i=a.exec(t);if(null==i){l+=t.substring(n,t.length);break}if(2!==i.length){console.error("trans array length !== 2. trans: ",i);break}l+=t.substring(n,i.index),n=i.index,l+=_.isNil(i[1])?i[0]:this.fraglate.translate(i[1],e,r),n+=i[0].length}return l},FraglateEval.prototype.evalInterpolate=function(t,e){if(_.isNil(t))return"";for(var r=/\{\{([\s\S]+?)\}\}/g,a=0,n="";;){var l=r.exec(t);if(null==l){n+=t.substring(a,t.length);break}if(2!==l.length){console.error("interpolate array length !== 2. interpolate: ",l);break}n+=t.substring(a,l.index),a=l.index,n+=_.isNil(l[1])?trans[0]:FraglateEval.eval_with_context(l[1],e),a+=l[0].length}return n},FraglateEval.prototype.evalInterpolateAsFunction=function(t,e){if(_.isNil(t))return"";for(var r=/\{\{\{([\s\S]+?)\}\}\}/g,a=0,n="";;){var l=r.exec(t);if(null==l){n+=t.substring(a,t.length);break}if(2!==l.length){console.error("interpolate array length !== 2. interpolate: ",l);break}n+=t.substring(a,l.index),a=l.index,n+=_.isNil(l[1])?trans[0]:FraglateEval.eval_with_context_as_function(l[1],e),a+=l[0].length}return n},FraglateEval.prototype.eval=function(t,e,r,a){_.isNil(a)&&(a={});var n=this.evalTranslate(t,e,r),l=this.evalInterpolateAsFunction(n,a),i=this.evalInterpolate(l,a);return i},FraglateEval}();module.exports=FraglateEval;
//# sourceMappingURL=data:application/json;base64,
