"use strict";var FraglateClass=function(){function e(e){var i=e.split("-",2),l=i[0],t=i[1];return t=s.isNil(t)?null:t.toLowerCase(),[l,t]}function i(e,i,l){return s.isNil(l)&&!s.isNil(e[i])?!0:!(s.isNil(l)||s.isNil(e[i])||s.isNil(e[i].region[l]))}function l(e,i){return i?e+"-"+i:e}function t(e,i){this.config=Object.assign({},t.DEFAULT_CONFIG,e),this.locales={},s.isNil(i)?this.load_all_localesSync(this.config.locale_path):this.load_all_locales(this.config.locale_path,i),global[this.config.translate]=this._t.bind(this),global[this.config.eval]=this._e.bind(this)}var o=require("./FraglateEval"),s=require("./util"),a=require("asyncawait/async"),n=require("asyncawait/await"),r=require("bluebird"),c=r.promisifyAll(require("fs")),u=require("path"),f=require("process");return t.EVAL=o,t.DEFAULT_CONFIG={translate:"_t",eval:"_e",locale_path:u.join(f.cwd(),"locale"),locale_extension:"json",default_locale:"en",cookiename:"locale"},t.GET_ACCEPTED_LANGUAGES_FROM_HEADER=function(e){var i=e.split(",");return i.map(function(e){var i=e.trim().split(";q=");if(i.length<2)i.push(1);else{var l=parseFloat(i[1]);i[1]=l?l:0}return i}).filter(function(e){return e[1]>0}).sort(function(e,i){return i[1]-e[1]})},t.prototype.as_middleware=function(){return function(e,i,l){return e.locale||this.guess_language(e),this.express_request=e,"function"==typeof l?l():void 0}.bind(this)},t.prototype.process_locale_content=function(i,l){var t=e(i.replace(/\.json$/g,"")),o=t[0],a=t[1],n=JSON.parse(l);s.isNil(a)?s.isNil(this.locales[o])?this.locales[o]={data:n,region:{}}:this.locales[o].data=n:s.isNil(this.locales[o])?(this.locales[o]={data:"",region:{}},this.locales[o].region[a]=n):this.locales[o].region[a]=n},t.prototype.load_all_locales=function(e,i){var l=a(function(e,i){var l=n(c.readdirAsync(e)),t=n(l.map(function(i){return c.readFileAsync(u.join(e,i)).then(function(e){return[i,e]})}));t.map(function(e){var i=e[0],l=e[1];this.process_locale_content(i,l)}.bind(this))}.bind(this));l(e).then(i)["catch"](i)},t.prototype.load_all_localesSync=function(e){var i=c.readdirSync(e);i.map(function(i){var l=c.readFileSync(u.join(e,i));this.process_locale_content(i,l)}.bind(this))},t.prototype.guess_language=function(o){if("object"==typeof o){var a=this.config.cookiename;if(!s.isNil(a)&&!s.isNil(o.cookies)&&!s.isNil(o.cookies[a])){var n=o.cookies[a],r=e(n);if(i(this.locales,r[0],r[1]))return void(o.locale=l(r[0],r[1]))}var c=o.headers["accept-language"];if(c){for(var u=t.GET_ACCEPTED_LANGUAGES_FROM_HEADER(c),f=null,h=null,p=e(this.config.default_locale),_=0;_<u.length;++_){var r=e(u[_][0]),g=r[0],d=r[1],N=this.locales[g],v=this.locales[g].region[d];if(s.isNil(d)&&!s.isNil(N)){f=[g,null];break}if(!(s.isNil(d)||s.isNil(N)||s.isNil(v))){f=[g,d];break}s.isNil(d)||s.isNil(N)||!s.isNil(v)||(h=[g,null])}var y=f||h||p;o.locale=l(y[0],y[1])}}},t.prototype._t=function(l,t,o){s.isNil(t)&&(t=s.isNil(this.express_request)?this.config.default_locale:this.express_request.locale);var a=e(t),n=a[0],r=a[1];return i(this.locales,n,r)?this.translate(l,n,r,o):(console.error("Locale '"+t+"' is not configured!"),console.error("Locale available: "+JSON.stringify(this.locales)),"")},t.prototype._e=function(l,o,a){s.isNil(o)&&(o=s.isNil(this.express_request)?this.config.default_locale:this.express_request.locale);var n=e(o),r=n[0],c=n[1];return i(this.locales,r,c)?new t.EVAL(this).eval(l,r,c,a):(console.error("Locale '"+o+"' is not configured!"),"")},t.prototype.translate=function(e,i,l,o){var a=new t.EVAL(this),n=s.isNull(l)?this.locales[i].data[e]:this.locales[i].region[l][e];return"string"==typeof n?a.eval(n,i,l,o):("undefined"==typeof n?console.error("locale: "+locale.toString()+', no translation to key: "'+e.toString()+'"'):console.error("locale: "+locale.toString()+", translation to '"+(typeof n).toString()+"' is not supported!"),null)},t}();module.exports=FraglateClass;
//# sourceMappingURL=data:application/json;base64,
